<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bixin.nft.core.mapper.NftInfoMapper">
  <resultMap id="BaseResultMap" type="com.bixin.nft.bean.DO.NftInfoDo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="nft_id" jdbcType="BIGINT" property="nftId" />
    <result column="group_id" jdbcType="BIGINT" property="groupId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="image_link" jdbcType="VARCHAR" property="imageLink" />
    <result column="owner" jdbcType="VARCHAR" property="owner" />
    <result column="score" jdbcType="DECIMAL" property="score" />
    <result column="rank" jdbcType="INTEGER" property="rank" />
    <result column="created" jdbcType="BIT" property="created" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.bixin.nft.bean.DO.NftInfoDo">
    <result column="image_data" jdbcType="LONGVARCHAR" property="imageData" />
  </resultMap>
  <sql id="Base_Column_List">
    id, nft_id, group_id, name, image_link, owner, score, rank, created, create_time, 
    update_time
  </sql>
  <sql id="Blob_Column_List">
    image_data
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from nft_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from nft_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.bixin.nft.bean.DO.NftInfoDo" useGeneratedKeys="true">
    insert into nft_info (id, nft_id, group_id, 
      name, image_link, owner, 
      score, rank, created, create_time, 
      update_time, image_data)
    values (#{id,jdbcType=BIGINT}, #{nftId,jdbcType=BIGINT}, #{groupId,jdbcType=BIGINT}, 
      #{name,jdbcType=VARCHAR}, #{imageLink,jdbcType=VARCHAR}, #{owner,jdbcType=VARCHAR}, 
      #{score,jdbcType=DECIMAL}, #{rank,jdbcType=INTEGER}, #{created,jdbcType=BIT}, #{createTime,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=BIGINT}, #{imageData,jdbcType=LONGVARCHAR})
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bixin.nft.bean.DO.NftInfoDo">
    update nft_info
    <set>
      <if test="nftId != null">
        nft_id = #{nftId,jdbcType=BIGINT},
      </if>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="imageLink != null">
        image_link = #{imageLink,jdbcType=VARCHAR},
      </if>
      <if test="owner != null">
        owner = #{owner,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=DECIMAL},
      </if>
      <if test="rank != null">
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="imageData != null">
        image_data = #{imageData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bixin.nft.bean.DO.NftInfoDo">
    update nft_info
    set nft_id = #{nftId,jdbcType=BIGINT},
      group_id = #{groupId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      image_link = #{imageLink,jdbcType=VARCHAR},
      owner = #{owner,jdbcType=VARCHAR},
      score = #{score,jdbcType=DECIMAL},
      rank = #{rank,jdbcType=INTEGER},
      created = #{created,jdbcType=BIT},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      image_data = #{imageData,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <sql id="baseQuery">
    <trim prefix="WHERE" prefixOverrides="AND | OR">
      <if test="null != id">
         and id = #{id,jdbcType=BIGINT}
      </if>
      <if test="null != nftId">
         and nft_id = #{nftId,jdbcType=BIGINT}
      </if>
      <if test="null != groupId">
         and group_id = #{groupId,jdbcType=BIGINT}
      </if>
      <if test="null != name">
         and name = #{name,jdbcType=VARCHAR}
      </if>
      <if test="null != imageLink">
         and image_link = #{imageLink,jdbcType=VARCHAR}
      </if>
      <if test="null != owner">
         and owner = #{owner,jdbcType=VARCHAR}
      </if>
      <if test="null != score">
         and score = #{score,jdbcType=DECIMAL}
      </if>
      <if test="null != rank">
         and rank = #{rank,jdbcType=INTEGER}
      </if>
      <if test="null != created">
         and created = #{created,jdbcType=BIT}
      </if>
      <if test="null != createTime">
         and create_time = #{createTime,jdbcType=BIGINT}
      </if>
      <if test="null != updateTime">
         and update_time = #{updateTime,jdbcType=BIGINT}
      </if>
      <if test="null != imageData">
         and image_data = #{imageData,jdbcType=LONGVARCHAR}
      </if>
    </trim>
  </sql>
  <select id="selectByPrimaryKeySelective" parameterType="com.bixin.nft.bean.DO.NftInfoDo" resultMap="BaseResultMap">
    select  * from nft_info
    <include refid="baseQuery" />
  </select>
  <select id="selectByPrimaryKeySelectiveList" parameterType="com.bixin.nft.bean.DO.NftInfoDo" resultMap="BaseResultMap">
    select  * from nft_info
    <include refid="baseQuery" />
  </select>
</mapper>